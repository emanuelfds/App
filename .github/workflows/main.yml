name: Python application

on:
  push:
    branches: [ "rc", "develop"]
  
  pull_request:
    branches: [ "main" ]

permissions: write-all


jobs:
  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repository  
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    name: Push Docker image
    needs: dependencies
    runs-on: ubuntu-latest

    outputs:
      component_version: ${{ steps.extract_component_version.outputs.component_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
                
      - name: Set Branch Name
        if: github.ref == 'refs/heads/rc'
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed 's/refs\/heads\///')" >> $GITHUB_ENV
          BRANCH_NAME=$(echo ${{ github.ref }} | sed 's/refs\/heads\///')
          echo "Branch name: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Print Branch Name
        run: | 
          echo "Branch name: ${{ env.BRANCH_NAME }}"
    
      - name: Increase version
        if: github.ref == 'refs/heads/rc'
        run: |
          python3.10 increase-version3.py component_version ${{ env.BRANCH_NAME }}
          # cat component_version
          newversion=$(cat component_version)
          echo "newversion=$newversion" >> $GITHUB_ENV
          echo "Component Version: $newversion"

          # Commit e push das alterações de volta para o repositório
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git config --global user.name ${{ vars.GIT_USERNAME }}
          git add component_version
          git commit -m "Increment version in component_version for $newversion"
          git push origin ${{ github.ref }}

      - name: Extract component version
        id: extract_component_version
        run: echo "::set-output name=component_version::$(cat component_version)"
  
      - name: Show component version
        run: echo "Extracted version is ${{ steps.extract_component_version.outputs.component_version }}"

      - name: Push image to Docker Hub
        if: github.ref == 'refs/heads/rc'
        uses: docker/build-push-action@v4
        with:
          context: ./Application
          push: true
          tags: emanuelfds/app:v${{ env.newversion }}

  trivy-scanning-docker-hub:
    name: Trivy Scanner Docker Hub
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'emanuelfds/app:v${{ needs.docker.outputs.component_version }}'  # Docker image reference
          format: 'sarif'                                                             # output format of scan results (table, json, sarif)
          output: 'trivy-results-docker-hub.sarif'                                    # location where vulnerability scan results will be recorded
          exit-code: '0'                                                              # if 'exit-code: 1' your pipeline will be interrupted
          ignore-unfixed: true                                                        # ignore unfixed vulnerabilities
          vuln-type: 'os,library'                                                     # type of vulnerabilities to be displayed
          severity: 'CRITICAL,HIGH,MEDIUM'                                            # severities of vulnerabilities to be displayed

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-docker-hub.sarif'

      - name: Run Trivy vulnerability scanner in IaC mode - Application
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './Application'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results-application.sarif'
          exit-code: '0' 
          ignore-unfixed: true          
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab - Application
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-application.sarif'
          category: 'TrivyScanResultsApplication'

      - name: Run Trivy vulnerability scanner in IaC mode - Configs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './Configs'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results-configs.sarif'
          exit-code: '0' 
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab - Configs
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-configs.sarif'
          category: 'TrivyScanResultsConfigs'

  # modifygit:
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       name: changing the deployment of git repo
  #       with:
  #         ref: 'nome-da-sua-branch' # TESTAR
  #         repository: 'emanuelfds/App-Manifest'
  #         token: ${{ secrets.GIT_PAT }}
  #         persist-credentials: true
  #     - name: modify the image
  #       run: |
  #         git config user.email ${{ secrets.GIT_EMAIL }}
  #         git config user.name "${{ vars.GIT_USERNAME }}"
  #         pwd
  #         cat ${{ vars.K8S_PATH }}/deployment.yaml
  #         pwd
  #         sed -i "s+emanuelfds/app.*+emanuelfds/app:v$RUN_NUMBER+g" ${{ vars.K8S_PATH }}/deployment.yaml
  #         cat ${{ vars.K8S_PATH }}/deployment.yaml
  #         git add .
  #         git commit -m 'Versão da Aplicação alterada para a TAG: ${{ github.run_number }}'
  #         git push origin main
  #       env:
  #         RUN_NUMBER: ${{ github.run_number }}
